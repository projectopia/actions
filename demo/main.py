# Path: demo/__main__.py (black formatting)
# Required Libraries: os, requests, streamlit, python-dotenv

import os
import requests
import streamlit as st
from dotenv import load_dotenv

if os.path.exists(".env"):
    print("Loading .env from the root directory.")
    load_dotenv()
elif os.path.exists("../.env"):
    print("Loading .env from the parent directory.")
    load_dotenv("../.env")
elif os.path.exists("demo/.env"):
    print("Loading .env from the demo directory.")
    load_dotenv("demo/.env")
else:
    st.error("No .env file found.")

GITHUB_TOKEN_DISPATCH = os.environ.get("GITHUB_TOKEN_DISPATCH")
GITHUB_TOKEN_OAUTH = os.environ.get("GITHUB_TOKEN_OAUTH")


def trigger_workflow_dispatch(
    github_token_dispatch,
    github_token_oauth,
    repository_name,
    repository_description,
    repository_private,
    project_name,
    project_tagline,
    template_type,
    template_choice,
):
    url = f"https://api.github.com/repos/projectopia/actions/actions/workflows/90389476/dispatches"
    print(f"Using {github_token_dispatch} to trigger workflow dispatch.")
    print(f"Using {github_token_oauth} to create the repository.")

    headers = {
        "Authorization": f"token {github_token_dispatch}",
        "Accept": "application/vnd.github+json",
        "X-GitHub-Api-Version": "2022-11-28",
    }

    payload = {
        "ref": "main",
        "inputs": {
            "github-token": str(github_token_oauth),
            "repository-name": str(repository_name),
            "repository-description": str(repository_description),
            "repository-private": str(repository_private),
            "project-name": str(project_name),
            "project-tagline": str(project_tagline),
            "template-type": str(template_type),
            "template-choice": str(template_choice),
        },
    }

    response = requests.post(url, headers=headers, json=payload)

    if response.status_code == 204:
        st.success("Workflow dispatch triggered successfully.")
    else:
        st.error(f"Status code: {response.status_code}")
        st.error(f"Response: {response.text}")


# Streamlit form
st.title("Projectopia Generator Demo")

repository_name = st.text_input("Repository Name", value="projectopia.example")
repository_description = st.text_input(
    "Repository Description", value="A repository generated by Projectopia"
)
repository_private = st.selectbox(
    "Repository Visibility", options=["public", "private"], index=0
)
project_name = st.text_input("Project Display Name")
project_tagline = st.text_input(
    "Project Tagline", value="A project generated by Projectopia"
)
template_type = st.selectbox("Template Type", options=["blog"], index=0)
template_choice = st.selectbox("Template Choice", options=["mkdocs-material"], index=0)

if st.button("Submit"):
    trigger_workflow_dispatch(
        GITHUB_TOKEN_DISPATCH,
        GITHUB_TOKEN_OAUTH,
        repository_name,
        repository_description,
        repository_private,
        project_name,
        project_tagline,
        template_type,
        template_choice,
    )
