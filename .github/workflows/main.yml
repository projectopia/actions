name: Projectopia Core
on:
  workflow_dispatch:
    inputs:
      github-token:
        description: "GitHub OAuth/Personal Access Token"
        required: true

      repository-name:
        description: "Repository Name"
        required: true
        default: "projectopia.example"

      repository-description:
        description: "Repository Description"
        required: false
        default: "A repository generated by Projectopia"

      repository-private:
        description: "Repository Visibility"
        type: choice
        options:
          - public
          - private
        default: public

      project-name:
        description: "Project Display Name"
        required: true

      project-tagline:
        description: "Project tagline"
        required: false
        default: "A project generated by Projectopia"

      template-type:
        description: "Template type"
        type: choice
        options:
          - blog
        default: blog

      template-choice:
        description: "Template choice"
        type: choice
        options:
          - mkdocs-material
        default: mkdocs-material

env:
  remote-path: /tmp/github-remote-repo
  cruft-path: /tmp/cruft-generated-repo
  python-version: 3.12

jobs:
  generator:
    name: Generator
    runs-on: ubuntu-latest
    steps:
      - name: Hide sensitive inputs
        uses: levibostian/action-hide-sensitive-inputs@1.0.0

      - uses: actions/checkout@v4

      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Create Repository And Apply Scaffold
        env:
          template-url: "https://github.com/projectopia/forge.${{ inputs.template-type }}"
        run: |
          source .venv/bin/activate
          # Create Repository
          python3 -m projectopia.create-repo --name "${{ inputs.repository-name }}" --description "${{ inputs.repository-description }}" --private "${{ inputs.repository-private }}" --pages "true" --token "${{ inputs.github-token }}"

          # Authenticate to GitHub
          touch ~/.netrc
          git config --global user.name "projectopia-bot"
          git config --global user.email "projectopia.hcmus@outlook.com"
          echo "machine github.com" >> ~/.netrc
          echo "login ${{ env.github-username }}" >> ~/.netrc
          echo "password ${{ inputs.github-token }}" >> ~/.netrc

          # Create project with scaffold
          git clone https://github.com/${{ env.github-username }}/${{ inputs.repository-name }} ${{ env.remote-path }}
          cruft create ${{ env.template-url }} --directory ${{ inputs.template-choice }}-template --extra-context '{"blog_name": "${{ inputs.project-name }}", "blog_slug": "${{ inputs.repository-name }}", "blog_tagline": "${{ inputs.project-tagline }}", "github_username": "${{ env.github-username }}"}' --overwrite-if-exists --output-dir ${{ env.cruft-path }} -y
          cp -rT "${{ env.cruft-path }}/${{ inputs.repository-name }}" ${{ env.remote-path }}

      - name: Push changes to a null repository
        run: |
          cd ${{ env.remote-path }}
          git checkout main
          git add --all
          git commit -m "feat(bot): apply projectopia scaffold [${{ inputs.template-type }}-${{ inputs.template-choice }}]"
          git push -u origin main

      - name: Notify to frontend
        run: |
          echo "Done! Your project is ready!"
